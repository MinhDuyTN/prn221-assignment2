@page
@model TranNgoMinhDuyRazorPages.Pages.NewsArticles.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
    @* create search bar *@
    <form asp-page="./Index" method="get">
        <div class= "form-actions no-color">
            <p>
                Find by name:
                <input type="text" name="SearchString" value="@Model.CurrentFilter"/>
                <input type="submit" value="Search" class="btn btn-primary" /> |
                <a asp-page="./Index">Back to full List</a>
            </p>
        </div>
    </form>

<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort"
                asp-route-currentFilter="@Model.CurrentFilter">
                @Html.DisplayNameFor(model => model.NewsArticle[0].NewsTitle)
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.DateSort"
                asp-route-currentFilter="@Model.CurrentFilter">
                @Html.DisplayNameFor(model => model.NewsArticle[0].CreatedDate)
                </a>

            </th>
            <th>
                @Html.DisplayNameFor(model => model.NewsArticle[0].NewsContent)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.NewsArticle[0].NewsStatus)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.NewsArticle[0].ModifiedDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.NewsArticle[0].Category)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.NewsArticle[0].CreatedBy)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.NewsArticles) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.NewsTitle)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CreatedDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.NewsContent)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.NewsStatus)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ModifiedDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category.CategoryDesciption)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CreatedBy.AccountId)
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.NewsArticleId">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.NewsArticleId">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.NewsArticleId">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
@{
var prevDisabled = !Model.NewsArticles. HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.NewsArticles.HasNextPage ? "disabled" : "";
}
<a asp-page="./Index"
    asp-route-sortOrder="@Model. CurrentSort"
    asp-route-pageIndex="@(Model.NewsArticles.PageIndex - 1)"
    asp-route-currentFilter="@Model.CurrentFilter"
    class="btn btn-primary @prevDisabled">
    Previous
</a>
<a asp-page="./Index"
    asp-route-sortOrder="@Model.CurrentSort"
    asp-route-pageIndex="@(Model.NewsArticles.PageIndex + 1)"
    asp-route-currentFilter="@Model.CurrentFilter"
    class="btn btn-primary @nextDisabled">
    Next
</a>

